Leetcode problems

#3131 problem
class Solution:
    def addedInteger(self, nums1: List[int], nums2: List[int]) -> int:
        nums1.sort()
        nums2.sort()
        return (nums2[0] - nums1[0])


#3069 problem
class Solution:
    def resultArray(self, nums: List[int]) -> List[int]:
        arr1 ,arr2 = [] , []
        arr1.append(nums[0])
        arr2.append(nums[1])
        for i in nums[2:]:
            if arr1[-1] > arr2[-1]:
                arr1.append(i)
            else:
                arr2.append(i)
        return arr1 + arr2


#2529
class Solution:
    def maximumCount(self, nums: List[int]) -> int:
        dict = {"N":0 , "P":0}
        for i in nums:
            if i>0:
                dict['P']+=1
            elif i<0:
                dict['N']+=1
        return max(dict["P"],dict["N"])



#746
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        prev2, prev1 = cost[0], cost[1]  

        for i in range(2, len(cost)):
            current = cost[i] + min(prev1, prev2)
            prev2, prev1 = prev1, current  

        return min(prev1, prev2)


#2160
class Solution:
    def minimumSum(self, num: int) -> int:
        list1 = list(str(num))
        print(list1)
        list1.sort()
        return (int(list1[0]+list1[-1]) + int(list1[1] + list1[-2]))


#2144
class Solution:
    def minimumCost(self, cost: List[int]) -> int:
        cost.sort(reverse=True)
        total = 0
        
        for i in range(0, len(cost), 3):
            total += cost[i] 
            if i + 1 < len(cost):
                total += cost[i + 1] 
        return total


#2206
class Solution:
    def divideArray(self, nums: List[int]) -> bool:
        counter = Counter(nums)
        print(counter)
        for i in counter:
            if counter[i]%2!=0:
                return False
        return True


#2460
class Solution:
    def applyOperations(self, nums: List[int]) -> List[int]:
        for i in range(len(nums)-1):
            if nums[i] == nums[i+1]:
                nums[i] = nums[i]* 2
                nums[i+1] = 0
        result = [num for num in nums if num!=0]
        result.extend([0]*(len(nums) - len(result)))
        return result
